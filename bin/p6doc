#!/usr/bin/env perl6

use v6.d;
use lib 'lib';
use P6doc;

my $PROGRAM-NAME = "p6doc";

# if usage is changed please also update doc/Programs/02-reading-docs.pod6
sub USAGE() {
    say "You want to maintain the index?";
    say "To build an index for '$PROGRAM-NAME -f'";
    say "          $PROGRAM-NAME build";
    say "\nTo list the index keys";
    say "          $PROGRAM-NAME list";
    say "\nTo display module name(s) containing key";
    say "          $PROGRAM-NAME lookup";
    say "\nTo show where the index file lives";
    say "          $PROGRAM-NAME path-to-index";

    say "\nWhat documentation do you want to read?";
    say "Examples: $PROGRAM-NAME Str";
    say "          $PROGRAM-NAME Str.split";
    say "          $PROGRAM-NAME faq";
    say "          $PROGRAM-NAME path/to/file";
    say "\nSet the POD_TO_TEXT_ANSI if you want to use ANSI escape sequences to enhance text";

    say "\nYou can list some top level documents:";
    say "          $PROGRAM-NAME -l";

    say "\nYou can also look up specific method/routine/sub definitions:";
    say "          $PROGRAM-NAME -f hyper";
    say "          $PROGRAM-NAME -f Array.push";

    say "\nYou can bypass the pager and print straight to stdout:";
    say "          $PROGRAM-NAME -n Str";
}

multi sub MAIN($docee, Bool :$n) {
    return MAIN($docee, :f, :$n) if defined $docee.index('.');
    show-docs(locate-module($docee), :no-pager($n), :package($docee));
}

multi sub MAIN(Bool :$l!) {
    my @paths = search-paths() X~ <Type/ Language/>;
    my @modules;
    for @paths -> $dir {
        for dir($dir).sort -> $file {
            @modules.push: $file.basename.subst( '.'~$file.extension,'') if $file.IO.f;
        }
    }
    @modules.append: list-installed().map(*.name);
    .say for @modules.unique.sort;
}

multi sub MAIN($docee, Bool :$f!, Bool :$n) {
    my ($package, $method) = $docee.split('.');
    if ! $method {
        my %hits;
        if INDEX.IO !~~ :e {
            say "building index on first run. Please wait...";
            build_index();

        }

        my %data = EVALFILE INDEX;

        my $final-docee = disambiguate-f-search($docee, %data);
        ($package, $method) = $final-docee.split('.');

        my $m = locate-module($package);
        show-docs($m, :section($method), :no-pager($n), :$package);
    } else {
        my $m = locate-module($package);
        show-docs($m, :section($method), :no-pager($n), :$package);
    }
}

multi sub MAIN(Str $file where $file.IO ~~ :e, Bool :$n) {
    show-docs($file, :no-pager($n));
}

# index related

multi sub MAIN('path-to-index') {
    say INDEX if INDEX.IO.e;
}

multi sub MAIN('build') {
    build_index();
}
